#!/usr/bin/python
"""Combine GSEA TRANSFACT ID -> symbols and TRANSFACT ID mapping.

Read TRANSFACT ID mappings from file, map to human gene name using Hugo module.
Read targets as entrez, map to symbol using Hugo module.
Writes to TF_MAP_OUT_FNAME as csv where first element in row is TF gene symbol, all others are targets.

python tfgene2targetgene.py
"""
import hugo_gene_symbols
import biopython_entrez


TF_MAP_OUT_FNAME = "tf2targs.may-21-2013.csv"

TF_FNAME = "transfac_id_to_genes_raw.tab" # TRANSFACT ID => TF Gene Symbol mapping as from 'parse_transfac.py'
TARG_FNAME = "c3.tft.v3.1.entrez.gmt"    # GSEA TRANSFACT ID => Target symbols mapping
SELECT_ENTREZ_MAP = eval(open("static_entrez_py_dict.txt").read())

# Generated by manual review of unmapped transcription factors.
MANUAL_MAP = {
  # transcription factors
  "CART1":"ALX1", "TGIF":"TGIF1",
  # based on entrez gene id to symbol
  "C12orf63": "C12orf55", # C12orf63 made obsolete as of 2013-04-24
  "ZFP112": "ZNF112", # ZNF112 withdrawn as of 2013-01-08
}
MANUAL_IGNORE = set((
  "NFATC5", # TF withdrawn
  "LINC00650", # withdrawn
 ))
# cannot find mapping for 

def make_map():
  H = hugo_gene_symbols.load()

  # parse TRANSFACT ID to tf gene symbols
  tid2tfs = {}
  for line in open(TF_FNAME):
    tid, tfs = line.strip().split('\t')
    if tfs == "None":
      tid2tfs[tid] = None
    else:
      tid2tfs[tid] = tfs.split(';')
  
  tid2targs = {}
  # parse TRANSFACT ID to target gene symbols
  for line in open(TARG_FNAME):
    row = line.strip().split('\t')
    tid2targs[row[0]] = row[2:]
  
  # Combine mappings while correcting for symbol mappings.
  unknown_tid = 0
  no_tf = 0
  multi_tf = 0
  unknown_tf = 0
  remap_tf = 0
  unknown_entrez = 0
  manual_mapped = 0
  manual_ignore = 0
  unmappable_entrez = 0
  tf_map = {}
  all_syms = set()
  all_unknown_entrez = set()
  # keep track of past queries
  unbiopymapped = set()
  bad_biopymapped = set()

  for tid, entrez_targs in tid2targs.items():
    if "_UNKNOWN" in tid:
      unknown_tid += 1
      continue
    tfs_raw = tid2tfs[tid]
    
    # Map transcription factors
    if tfs_raw is None:
      no_tf+=1;
      continue
      
    tfs = set()
    for s in tfs_raw:
      if s in MANUAL_MAP:
        tfs.add(MANUAL_MAP[s])
        manual_mapped += 1
        continue
      if s in MANUAL_IGNORE:
        manual_ignore += 1
        continue
      ss = H.find_sym(s, allow_dupe=True)
      if ss is None:
        print "Unknown...", s
        unknown_tf += 1 # this is the entry that we should fix
      elif isinstance(ss, set):
        multi_tf += 1; print s, ss
      else:
        tfs.add(ss)
        if ss != s:
          remap_tf += 1
            
    # Map entrez ID targets
    targs = set()
    for s in entrez_targs:
      ss = H.entrez.get(s,None)
      if not ss:
        unknown_entrez += 1
        all_unknown_entrez.add(s)
        # Can we find the gene symbol mapped to this entrez by another means?
        if s not in SELECT_ENTREZ_MAP:
          print "WARNING: %s not in SELECT_ENTREZ_MAP. Consider rebuilding map using test_biopython.py" % s
          continue
        ss = SELECT_ENTREZ_MAP[s]
        # Handle manual mappings based on past corrections
        if ss in MANUAL_MAP:
          targs.add(MANUAL_MAP[ss])
          manual_mapped += 1
          continue
        if ss in MANUAL_IGNORE:
          manual_ignore += 1
          continue
        # Handle all other cases
        if not ss:
          unmappable_entrez += 1
          unbiopymapped.add(s)
        else:
          sss = H.find_sym(ss)
          if sss != ss:
            print "WARNING: %s sym mapped to %s is not offical symbol %s." % (ss,s,sss)
            bad_biopymapped.add(s)
            # add the symbol even though it is not an officially mappable symbol
            targs.add(ss)
          else:
            targs.add(ss)
      else:
        targs.add(ss)
  
    # Update TF -> Target mappings
    all_syms.update(tfs)
    all_syms.update(targs)
    for tf in tfs:
      tf_map.setdefault(tf, set()).update(targs)
  
  # Generate Report
  print "total transfac entries:", len(tid2targs)
  print "unknown_tid:", unknown_tid
  print "no_tf:", no_tf
  print "multi_tf:", multi_tf
  print "unknown_tf:", unknown_tf
  print "remap_tf:", remap_tf
  print "unknown_entrez:", unknown_entrez
  print "manual_mapped:", manual_mapped
  print "manual_ignored:", manual_ignore
  print "# unbiopymapped:", len(unbiopymapped)
  print "# bad_biopymapped:", len(bad_biopymapped)
  print "# unmappable_entrez:", unmappable_entrez
  print "# unique unknown entrez ids:", len(all_unknown_entrez)
  print "# mapped Transcription factors:", len(tf_map)
  print "# unique symbols:", len(all_syms)
  print
  print "unbiopymapped:", unbiopymapped
  print
  print "bad_biopymapped:", bad_biopymapped

  # Save Result
  # uncomment to print unaccounted entrez IDs
  # print Unaccounted for entrez IDs
  # print ",".join(sorted(all_unknown_entrez))
  return tf_map


def main():
  tf_map = make_map()
  fp_out = open(TF_MAP_OUT_FNAME, "w")
  for tf in sorted(tf_map):
    print >>fp_out, ",".join([tf]+sorted(tf_map[tf]))
  fp_out.close()
  print "Wrote TF cleaned GSEA map to", TF_MAP_OUT_FNAME

if __name__ == "__main__":
  main()
